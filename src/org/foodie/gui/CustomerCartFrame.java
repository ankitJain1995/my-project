package org.foodie.gui;

import com.itextpdf.text.DocumentException;
import javax.swing.JFrame;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import javax.mail.MessagingException;
import javax.mail.internet.AddressException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.foodie.dao.CompanyDao;
import org.foodie.dao.OrderDao;
import org.foodie.dao.StaffDao;
import org.foodie.pojo.OrderPojo;
import org.foodie.pojo.UserCredentials;
import org.foodie.utility.Gmail;
import org.foodie.utility.Receipt;

/**
 *
 * @author AFROZ
 */
public class CustomerCartFrame extends javax.swing.JFrame {

    /**
     * Creates new form CustomerCartFrame
     */
    private final static int COMPANY_EMAIL_ID = 0;
    private final static int SECURITY_KEY = 1;
    private JFrame showFrame;
    private List<OrderPojo> orderList;
    private List<String> cartIds;
    private Map<String, List<OrderPojo>> companyCartIdMap;
    private Map<String, List<String>> companyEmailCredentialMap;

    public CustomerCartFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        companyCartIdMap = new HashMap<>();
        lblUserProfile.setText("@" + UserCredentials.getUserName());
        loadCartDetailsByCustomerId(UserCredentials.getUserId());
        btnOrderCart.setText("Order (" + orderList.size() + ")");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtCartTable = new javax.swing.JTable();
        btnOrderCart = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        btnOrderFood = new javax.swing.JButton();
        btnCancelOrder = new javax.swing.JButton();
        btnOrderHistory = new javax.swing.JButton();
        btnMyAccount = new javax.swing.JButton();
        lblUserProfile = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Customer Cart Frame");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jtCartTable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jtCartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PRODUCT NAME", "PRODUCT PRICE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtCartTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtCartTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtCartTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 620, 370));

        btnOrderCart.setBackground(new java.awt.Color(51, 153, 255));
        btnOrderCart.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnOrderCart.setForeground(new java.awt.Color(254, 255, 254));
        btnOrderCart.setText("Order (0)");
        btnOrderCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrderCartActionPerformed(evt);
            }
        });
        jPanel1.add(btnOrderCart, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 390, 219, 48));

        btnBack.setBackground(new java.awt.Color(51, 153, 255));
        btnBack.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnBack.setForeground(new java.awt.Color(254, 255, 254));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        jPanel1.add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 390, 219, 48));

        jPanel2.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 100, 630, 460));

        jPanel3.setBackground(new java.awt.Color(51, 153, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnOrderFood.setBackground(new java.awt.Color(255, 176, 9));
        btnOrderFood.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnOrderFood.setText("Order Food");
        btnOrderFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrderFoodActionPerformed(evt);
            }
        });
        jPanel3.add(btnOrderFood, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, 220, 40));

        btnCancelOrder.setBackground(new java.awt.Color(255, 176, 9));
        btnCancelOrder.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnCancelOrder.setText("Cancel Order");
        btnCancelOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelOrderActionPerformed(evt);
            }
        });
        jPanel3.add(btnCancelOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 360, 220, 40));

        btnOrderHistory.setBackground(new java.awt.Color(255, 176, 9));
        btnOrderHistory.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnOrderHistory.setText("Order History");
        btnOrderHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrderHistoryActionPerformed(evt);
            }
        });
        jPanel3.add(btnOrderHistory, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 420, 220, 40));

        btnMyAccount.setBackground(new java.awt.Color(255, 176, 9));
        btnMyAccount.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnMyAccount.setText("My Account");
        btnMyAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMyAccountActionPerformed(evt);
            }
        });
        jPanel3.add(btnMyAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, 220, 40));

        lblUserProfile.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblUserProfile.setForeground(new java.awt.Color(51, 51, 51));
        jPanel3.add(lblUserProfile, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, 200, 34));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/foodie/icon/user.png"))); // NOI18N
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 10, -1, -1));

        jSeparator2.setForeground(new java.awt.Color(255, 255, 255));
        jPanel3.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 280, 7));

        jPanel2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -6, 280, 560));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 65)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 102, 255));
        jLabel2.setText("My Cart");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 0, -1, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 930, 550));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtCartTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtCartTableMouseClicked
        // TODO add your handling code here:

        DefaultTableModel model = (DefaultTableModel) jtCartTable.getModel();
        System.out.println(model.getDataVector().get(jtCartTable.getSelectedRow()));
        int index = jtCartTable.getSelectedRow();
        System.out.println("orderlist : \n" + orderList);
        System.out.println("order selected : \n" + orderList.get(index));
//        String answer = JOptionPane.showInputDialog(this, "Please enter the otp send to your email", "Cancel Order", JOptionPane.INFORMATION_MESSAGE);
//        System.out.println("answer is " + answer);

        // Custom button names
        String[] options = {"Delete Item", "Order Now"};

        // Display the dialog
        int result = JOptionPane.showOptionDialog(null,
                "Message",
                "Title",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.INFORMATION_MESSAGE,
                null,
                options,
                options[0]);

        // Check which button was clicked
        if (result == 0) {
            try {
                // Delete the Cart was clicked
                System.out.println("delete this card. was clicked");
                boolean isItemDeleted = OrderDao.deleteOrderCartByOrderId(orderList.get(index).getOrderId());
                if (isItemDeleted) {
                    showFrame = new CustomerCartFrame();
                    showFrame.setVisible(Boolean.TRUE);
                    this.dispose();
                    return;
                }
                //display message for not able to delete
                JOptionPane.showMessageDialog(this, "Could not delete the Item From The Cart!\nTry Again later.", "Error", JOptionPane.ERROR_MESSAGE);

            } catch (SQLException ex) {
                ex.printStackTrace();
            }

        } else if (result == 1) {
            // Place Order was clicked
            System.out.println("Place Order was clicked");
            // set the data in the product object before sending it.

            showFrame = new OrderProductFrame(orderList.get(index).getOrderId());
            showFrame.setVisible(Boolean.TRUE);
            this.dispose();
        }

    }//GEN-LAST:event_jtCartTableMouseClicked

    private void btnOrderCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrderCartActionPerformed
        // TODO add your handling code here:

//        DefaultTableModel model = (DefaultTableModel) jtCartTable.getModel();
//        System.out.println(model.getDataVector().get(jtCartTable.getSelectedRow()));
//        int index = jtCartTable.getSelectedRow();
//        System.out.println("orderlist : \n" + orderList);
//        System.out.println("order selected : \n" + orderList.get(index));
        //SEND EMAIL TO THE CUSTOMER MAIL ID THE OTP : 
        if (companyCartIdMap.isEmpty()) {
            return;
        }
        try {
            companyEmailCredentialMap = new HashMap<>();
            for (String companyName : companyCartIdMap.keySet()) {
                int otp = 100000 + new Random().nextInt(900000);
                OrderPojo orderCart = new OrderPojo();
                orderCart.setOrderId("");
                String orderId = "ORD - ";
                double totalprice = 0;
                Map<String, String> randomStaffDetails = StaffDao.getRandomStaffDetailsFromCompany(companyName);
                orderCart.setDeliveryStaffName(randomStaffDetails.get("staffName"));
                orderCart.setDeliveryStaffMobileNo(randomStaffDetails.get("mobileNo"));
                List<String> productNames = new ArrayList<>();
                List<Double> productPrices = new ArrayList<>();

                for (OrderPojo orderCartList : companyCartIdMap.get(companyName)) {
                    orderId += orderCartList.getOrderId().substring(3) + ", ";
                    totalprice += orderCartList.getProductPrice();
                    productNames.add(orderCartList.getProductName());
                    productPrices.add(orderCartList.getProductPrice());
                    orderCart.setCustomerAddress(orderCartList.getCustomerAddress());
                    orderCart.setCompanyEmailId(orderCartList.getCompanyEmailId());
                    OrderDao.setPropertyByOrderId(orderCartList.getOrderId(), randomStaffDetails.get("staffId"), otp);
                }

                orderCart.setOrderId(orderId);
                orderCart.setProductPrice(totalprice);
                orderCart.setCustomerName(UserCredentials.getUserName());
                orderCart.setCompanyName(companyName);
                orderCart.setOtp(otp);
                Receipt.generateReceipt(orderCart, productNames, productPrices);

                boolean result = OrderDao.checkOutCart(cartIds);
                if (!result) {
                    JOptionPane.showMessageDialog(this, "Could Not Check Out!\nTry Again later.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                String companyEmail = orderCart.getCompanyEmailId();
                Map<String, String> sellerEmailCredential = CompanyDao.getSellerEmailCredentialByCompanyEmail(companyEmail);
                List<String> credentials = Arrays.asList(sellerEmailCredential.get("emailId"), sellerEmailCredential.get("securityKey"));
                companyEmailCredentialMap.put(companyName, credentials);
//                Gmail gmail = new Gmail();
//                gmail.setupServerProperties();
//                String companyEmail = orderCart.getCompanyEmailId();
//
//                System.out.println("company email" + companyEmail);
//
//                gmail.sendOrderReceiptTo(UserCredentials.getEmailId(), companyName);
//                Map<String, String> sellerEmailCredential = CompanyDao.getSellerEmailCredentialByCompanyEmail(companyEmail);
//                gmail.sendEmailFrom(sellerEmailCredential.get("emailId"), sellerEmailCredential.get("securityKey"));

                System.out.println("otp is " + otp);

            }

            JOptionPane.showMessageDialog(this, "You Will Get Your Receipt On Your Registered Email Id", "Success", JOptionPane.INFORMATION_MESSAGE);
            sendEmailReceipt();
            showFrame = new CustomerCartFrame();
            showFrame.setVisible(true);

            this.dispose();
        } catch (SQLException | URISyntaxException | DocumentException | IOException ex) {
            ex.printStackTrace();
        } catch (MessagingException ex) {
            System.out.println("error while sending the email.");
            ex.printStackTrace();
        }
        // Handle the interrupted exception if required

    }//GEN-LAST:event_btnOrderCartActionPerformed

    private void btnOrderFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrderFoodActionPerformed
        // TODO add your handling code here:
        showFrame = new OrderFoodFrame();
        showFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnOrderFoodActionPerformed

    private void btnCancelOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelOrderActionPerformed
        // TODO add your handling code here:
        showFrame = new CancelOrderFrame();
        showFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnCancelOrderActionPerformed

    private void btnOrderHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrderHistoryActionPerformed
        // TODO add your handling code here:
        showFrame = new OrderHistoryFrame();
        showFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnOrderHistoryActionPerformed

    private void btnMyAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMyAccountActionPerformed
        // TODO add your handling code here:
        showFrame = new CustomerAccountFrame();
        showFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnMyAccountActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
       showFrame=new CustomerOptionFrame();
       showFrame.setVisible(true);
       this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerCartFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerCartFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerCartFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerCartFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerCartFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCancelOrder;
    private javax.swing.JButton btnMyAccount;
    private javax.swing.JButton btnOrderCart;
    private javax.swing.JButton btnOrderFood;
    private javax.swing.JButton btnOrderHistory;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jtCartTable;
    private javax.swing.JLabel lblUserProfile;
    // End of variables declaration//GEN-END:variables

    private void sendEmailReceipt() throws MessagingException, SQLException, AddressException, URISyntaxException {
        Gmail gmail = new Gmail();
        gmail.setupServerProperties();
//                String companyEmail = orderCart.getCompanyEmailId();
        for (Map.Entry<String, List<String>> entry : companyEmailCredentialMap.entrySet()) {

            String key = entry.getKey();
            System.out.println("company email" + key);
            List<String> value = entry.getValue();
            gmail.sendOrderReceiptTo(UserCredentials.getEmailId(), key);
            gmail.sendEmailFrom(value.get(COMPANY_EMAIL_ID), value.get(SECURITY_KEY));
            File file = new File("src/resources/FoodOrderReceipt" + key + ".pdf");

//      DELETING THE PDF FILE
            boolean isDeleted = file.delete();

            if (isDeleted) {
                System.out.println("File deleted successfully.");
            } else {
                System.out.println("Failed to delete the file.");
            }
        }

    }

    private void loadCartDetailsByCustomerId(String customerId) {
        try {
            cartIds = new ArrayList<>();
            orderList = OrderDao.getOrderCartByCustomerId(customerId);
            Object[] rows = new Object[2]; //No. of Coloums / Object Array because different return type
            DefaultTableModel model = (DefaultTableModel) jtCartTable.getModel();
            for (OrderPojo order : orderList) {
                List<OrderPojo> orderlistPojo = companyCartIdMap.getOrDefault(order.getCompanyName(), new ArrayList<>());   //
                orderlistPojo.add(order);
                companyCartIdMap.put(order.getCompanyName(), orderlistPojo);
                cartIds.add(order.getOrderId());
                rows[0] = order.getProductName();
                rows[1] = order.getProductPrice();
                model.addRow(rows);
            }

            for (Map.Entry<String, List<OrderPojo>> entry : companyCartIdMap.entrySet()) {
                String key = entry.getKey();
                List<OrderPojo> value = entry.getValue();

                System.out.println("company name = " + key);
                System.out.println("product list = " + value);

            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
}
